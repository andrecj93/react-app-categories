{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Andr\\xE9 Jord\\xE3o\\\\Desktop\\\\talkdesk\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport data from '../../../data/apps.json'; //Sort the app items by ascending sum of price\n\nconst sortBySumPriceAsc = (a, b) => {\n  let sumPriceA = 0;\n  let sumPriceB = 0;\n  a.subscriptions.map(subscription => sumPriceA += subscription.price);\n  b.subscriptions.map(subscription => sumPriceB += subscription.price);\n  return sumPriceA > sumPriceB && 1 || sumPriceA === sumPriceB ? 0 : -1;\n}; //Filter the list of app items by app name\n\n\nconst filterByAppName = (app, name) => {\n  if (app.name.length > 0) {\n    return app.name.toLowerCase().includes(name.toLowerCase());\n  } else return 1;\n}; //Custom hook for using apps\n\n\nexport const useApps = (category, name, appsPerPage, currentPage) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        apps = _useState2[0],\n        setApps = _useState2[1];\n\n  const indexOfLastAppItem = currentPage * appsPerPage;\n  const indexOfFirstAppItem = indexOfLastAppItem - appsPerPage;\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        total = _useState4[0],\n        setTotal = _useState4[1]; //Conditional filter to handle\n\n\n  const conditionalFilter = (arr, condition, condition1) => {\n    if (condition) return [...arr.filter(condition1)];else return [...arr];\n  };\n  /**\r\n   *\r\n   * Skips the render if [category, name, indexOfFirstAppItem, indexOfLastAppItem, total]\r\n   */\n\n\n  useEffect(() => {\n    //Filtered apps by app name and category, uses the conditional filter to check if a category has been given in the parent component\n    const filteredApps = conditionalFilter(data.sort(sortBySumPriceAsc).filter(app => filterByAppName(app, name)), category, app => app.categories.includes(category)); //Sets total length of filtered apps - useful to know the total pages we might need before slicing it\n\n    setTotal(filteredApps.length); //Slices the array by the apps per page needed. Default is 3.\n\n    const sliced = filteredApps.slice(indexOfFirstAppItem, indexOfLastAppItem);\n    setApps(sliced);\n  }, [category, name, indexOfFirstAppItem, indexOfLastAppItem, total]);\n  return [apps, total];\n};","map":{"version":3,"sources":["C:/Users/André Jordão/Desktop/talkdesk/src/pages/AppList/hooks/useApps.js"],"names":["useState","useEffect","data","sortBySumPriceAsc","a","b","sumPriceA","sumPriceB","subscriptions","map","subscription","price","filterByAppName","app","name","length","toLowerCase","includes","useApps","category","appsPerPage","currentPage","apps","setApps","indexOfLastAppItem","indexOfFirstAppItem","total","setTotal","conditionalFilter","arr","condition","condition1","filter","filteredApps","sort","categories","sliced","slice"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,yBAAjB,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClC,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACAH,EAAAA,CAAC,CAACI,aAAF,CAAgBC,GAAhB,CAAoBC,YAAY,IAAKJ,SAAS,IAAII,YAAY,CAACC,KAA/D;AACAN,EAAAA,CAAC,CAACG,aAAF,CAAgBC,GAAhB,CAAoBC,YAAY,IAAKH,SAAS,IAAIG,YAAY,CAACC,KAA/D;AACA,SAAQL,SAAS,GAAGC,SAAZ,IAAyB,CAA1B,IAAgCD,SAAS,KAAKC,SAA9C,GAA0D,CAA1D,GAA8D,CAAC,CAAtE;AACD,CAND,C,CAQA;;;AACA,MAAMK,eAAe,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrC,MAAID,GAAG,CAACC,IAAJ,CAASC,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAOF,GAAG,CAACC,IAAJ,CAASE,WAAT,GAAuBC,QAAvB,CAAgCH,IAAI,CAACE,WAAL,EAAhC,CAAP;AACD,GAFD,MAEO,OAAO,CAAP;AACR,CAJD,C,CAMA;;;AACA,OAAO,MAAME,OAAO,GAAG,CAACC,QAAD,EAAWL,IAAX,EAAiBM,WAAjB,EAA8BC,WAA9B,KAA8C;AAAA,oBAIMrB,QAAQ,CACV,EADU,CAJd;AAAA;AAAA,QAEIsB,IAFJ;AAAA,QAGIC,OAHJ;;AAOE,QAAMC,kBAAkB,GACtBH,WAAW,GACXD,WAFF;AAGA,QAAMK,mBAAmB,GACvBD,kBAAkB,GAClBJ,WAFF;;AAVF,qBAgBMpB,QAAQ,CACV,CADU,CAhBd;AAAA;AAAA,QAcI0B,KAdJ;AAAA,QAeIC,QAfJ,kBAoBE;;;AACA,QAAMC,iBAAiB,GAAG,CACxBC,GADwB,EAExBC,SAFwB,EAGxBC,UAHwB,KAIrB;AACH,QACED,SADF,EAGE,OAAO,CACL,GAAGD,GAAG,CAACG,MAAJ,CACDD,UADC,CADE,CAAP,CAHF,KASE,OAAO,CACL,GAAGF,GADE,CAAP;AAGH,GAjBD;AAmBA;;;;;;AAIA5B,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMgC,YAAY,GAAGL,iBAAiB,CACpC1B,IAAI,CACDgC,IADH,CAEI/B,iBAFJ,EAIG6B,MAJH,CAKInB,GAAG,IACDD,eAAe,CACbC,GADa,EAEbC,IAFa,CANrB,CADoC,EAYpCK,QAZoC,EAapCN,GAAG,IACDA,GAAG,CAACsB,UAAJ,CAAelB,QAAf,CACEE,QADF,CAdkC,CAAtC,CAFc,CAqBd;;AACAQ,IAAAA,QAAQ,CACNM,YAAY,CAAClB,MADP,CAAR,CAtBc,CA0Bd;;AACA,UAAMqB,MAAM,GAAGH,YAAY,CAACI,KAAb,CACbZ,mBADa,EAEbD,kBAFa,CAAf;AAIAD,IAAAA,OAAO,CACLa,MADK,CAAP;AAGD,GAlCQ,EAkCN,CACDjB,QADC,EAEDL,IAFC,EAGDW,mBAHC,EAIDD,kBAJC,EAKDE,KALC,CAlCM,CAAT;AA0CA,SAAO,CACLJ,IADK,EAELI,KAFK,CAAP;AAID,CA1F/D","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport data from '../../../data/apps.json';\r\n\r\n//Sort the app items by ascending sum of price\r\nconst sortBySumPriceAsc = (a, b) => {\r\n  let sumPriceA = 0;\r\n  let sumPriceB = 0;\r\n  a.subscriptions.map(subscription => (sumPriceA += subscription.price));\r\n  b.subscriptions.map(subscription => (sumPriceB += subscription.price));\r\n  return (sumPriceA > sumPriceB && 1) || sumPriceA === sumPriceB ? 0 : -1;\r\n};\r\n\r\n//Filter the list of app items by app name\r\nconst filterByAppName = (app, name) => {\r\n  if (app.name.length > 0) {\r\n    return app.name.toLowerCase().includes(name.toLowerCase());\r\n  } else return 1;\r\n};\r\n\r\n//Custom hook for using apps\r\nexport const useApps = (category, name, appsPerPage, currentPage) => {\r\n                                                                       const [\r\n                                                                         apps,\r\n                                                                         setApps\r\n                                                                       ] = useState(\r\n                                                                         []\r\n                                                                       );\r\n                                                                       const indexOfLastAppItem =\r\n                                                                         currentPage *\r\n                                                                         appsPerPage;\r\n                                                                       const indexOfFirstAppItem =\r\n                                                                         indexOfLastAppItem -\r\n                                                                         appsPerPage;\r\n                                                                       const [\r\n                                                                         total,\r\n                                                                         setTotal\r\n                                                                       ] = useState(\r\n                                                                         0\r\n                                                                       );\r\n\r\n                                                                       //Conditional filter to handle\r\n                                                                       const conditionalFilter = (\r\n                                                                         arr,\r\n                                                                         condition,\r\n                                                                         condition1\r\n                                                                       ) => {\r\n                                                                         if (\r\n                                                                           condition\r\n                                                                         )\r\n                                                                           return [\r\n                                                                             ...arr.filter(\r\n                                                                               condition1\r\n                                                                             )\r\n                                                                           ];\r\n                                                                         else\r\n                                                                           return [\r\n                                                                             ...arr\r\n                                                                           ];\r\n                                                                       };\r\n\r\n                                                                       /**\r\n                                                                        *\r\n                                                                        * Skips the render if [category, name, indexOfFirstAppItem, indexOfLastAppItem, total]\r\n                                                                        */\r\n                                                                       useEffect(() => {\r\n                                                                         //Filtered apps by app name and category, uses the conditional filter to check if a category has been given in the parent component\r\n                                                                         const filteredApps = conditionalFilter(\r\n                                                                           data\r\n                                                                             .sort(\r\n                                                                               sortBySumPriceAsc\r\n                                                                             )\r\n                                                                             .filter(\r\n                                                                               app =>\r\n                                                                                 filterByAppName(\r\n                                                                                   app,\r\n                                                                                   name\r\n                                                                                 )\r\n                                                                             ),\r\n                                                                           category,\r\n                                                                           app =>\r\n                                                                             app.categories.includes(\r\n                                                                               category\r\n                                                                             )\r\n                                                                         );\r\n\r\n                                                                         //Sets total length of filtered apps - useful to know the total pages we might need before slicing it\r\n                                                                         setTotal(\r\n                                                                           filteredApps.length\r\n                                                                         );\r\n\r\n                                                                         //Slices the array by the apps per page needed. Default is 3.\r\n                                                                         const sliced = filteredApps.slice(\r\n                                                                           indexOfFirstAppItem,\r\n                                                                           indexOfLastAppItem\r\n                                                                         );\r\n                                                                         setApps(\r\n                                                                           sliced\r\n                                                                         );\r\n                                                                       }, [\r\n                                                                         category,\r\n                                                                         name,\r\n                                                                         indexOfFirstAppItem,\r\n                                                                         indexOfLastAppItem,\r\n                                                                         total\r\n                                                                       ]);\r\n\r\n                                                                       return [\r\n                                                                         apps,\r\n                                                                         total\r\n                                                                       ];\r\n                                                                     };"]},"metadata":{},"sourceType":"module"}